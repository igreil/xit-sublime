%YAML 1.2
# See http://www.sublimetext.com/docs/syntax.html
---
name: '[x]it!'
file_extensions: [xit]
scope: source.xit
contexts:

  # Every scope should have a conventional fallback
  # scope, so that the highlighting also works with
  # other themes.

  main:
  - include: group

  exit_on_blankline:
  - match: '^\s*$'
    pop: 99999

  group:
  # A group can either start with an item...
  - match: '^(?=\[)'
    push: items

  # ...or with a title (single line)
  - match: '^[^\s].*'
    scope: constant.language.xit entity.other.title.xit
    push: items

  # Anything else is invalid.
  - match: '^.*'
    scope: invalid.xit

  items:
  - meta_scope: entity.other.item.xit
  - include: exit_on_blankline

  # Match checkboxes and set meta scopes.
  - match: '^(?=\[ \])'
    push:
    - meta_scope: entity.other.status.open.xit
    - include: item
  - match: '^(?=\[x\])'
    push:
    - meta_scope: entity.other.status.checked.xit
    - include: item
  - match: '^(?=\[@\])'
    push:
    - meta_scope: entity.other.status.ongoing.xit
    - include: item
  - match: '^(?=\[~\])'
    push:
    - meta_scope: entity.other.status.obsolete.xit
    - include: item

  - match: '.*'
    scope: invalid.xit

  item:
  - include: exit_on_blankline

  - match: '^\[.\](?= |$)'
    scope: variable.parameter.xit entity.other.checkbox.xit
    push:
    - include: exit_on_blankline
    - match: ' '
      push:
      - match: '((!*)(\.*)|(\.*)(!*))(?= |$)'
        captures:
          2: keyword.xit entity.other.priority.exclamation.xit
          3: keyword.xit entity.other.priority.dot.xit
          4: keyword.xit entity.other.priority.dot.xit
          5: keyword.xit entity.other.priority.exclamation.xit
      - match: ''
        push:
        - include: exit_on_blankline
        - meta_scope: comment.xit entity.other.description.xit meta.description.xit
        - match: '^(?!    )'
          pop: 4
        - match: '-> (\d{4}(([-/]\d{2}([-/]\d{2}?)?)|([-/]W\d{2}))?)(?![-/])(?=[\p{P} ]|$)'
          scope: string.quoted entity.other.due_date.xit
        - match: (\#[\p{L}\d_-]+)(=((\'.*\')|(".*")|([\p{L}\d_-]+)))?
          captures:
            1: entity.other.tag.name.xit
            2: entity.other.tag.value.xit
  - match: '.*'
    scope: invalid.xit
